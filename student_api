from fastapi import FastAPI, HTTPException

app = FastAPI()
students_list = []

class Student:
    def __init__(self, id, name, age, email = None):
        self.id = id
        self.name = name
        self.age = age
        self.email = email

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "age": self.age,
            "email": self.email
        }

def find_student(student_id):
    for student in students_list:
        if student.id == student_id:
            return student
    return None

@app.post("/students/")
async def create_student(id, name, age, email=None):
    if find_student(id):
        raise HTTPException(status_code=400, detail="Student ID already exists")
    new_student = Student(id=id, name=name, age=age, email=email)
    students_list.append(new_student)
    return new_student.to_dict()

@app.get("/students/")
async def read_students():
    return [student.to_dict() for student in students_list]

@app.get("/students/{student_id}")
async def read_student(student_id):
    student = find_student(student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    return student.to_dict()

@app.put("/students/{student_id}")
async def update_student(student_id, name=None, age=None, email=None):
    student = find_student(student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    
    if name:
        student.name = name
    if age:
        student.age = age
    if email:
        student.email = email
    
    return student.to_dict()

@app.delete("/students/{student_id}")
async def delete_student(student_id):
    student = find_student(student_id)
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    
    students_list.remove(student)
    return {"message": "Student deleted successfully"}
